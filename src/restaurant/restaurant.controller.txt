import {
  Controller,
  Get,
  HttpStatus,
  NotFoundException,
  Param,
  Res,
} from '@nestjs/common';
import { RestaurantService } from './restaurant.service';
import { Client, ClientKafka, Transport } from '@nestjs/microservices';

@Controller('api/restaurant')
export class RestaurantController {
  constructor(private restaurantService: RestaurantService) {}

  @Client({
    transport: Transport.KAFKA,
    options: {
      client: {
        clientId: 'kafkaSample',
        brokers: ['localhost:9092'],
      },
      consumer: {
        groupId: 'my-kafka-consumer', // Should be the same thing we give in consumer
      },
    },
  })
  client: ClientKafka;

  async onModuleInit() {
    // Need to subscribe to topic
    // so that we can get the response from kafka microservice
    this.client.subscribeToResponseOf('caca');
    console.log('jajajjaja');
    await this.client.connect();
  }

  @Get('/:id')
  public async getRestaurant(@Res() res, @Param('id') restaurantId: string) {
    const restaurant = await this.restaurantService.findOne(restaurantId);
    if (!restaurant) {
      throw new NotFoundException('restaurant does not exist!');
    }
    console.log('si llega al api res');
    const response = await this.client
      .send('caca', 'desde apiRestApp')
      .toPromise();
    console.log(response);
    return res.status(HttpStatus.OK).json(restaurant);
  }
}
